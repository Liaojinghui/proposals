<pre>
  NEP: 3
  Title: NeoContract ABI
  Author: Erik Zhang <erik@neo.org>
  Type: Standard
  Status: Final
  Created: 2017-09-13
</pre>

==Abstract==

An Application Binary Interface (ABI) is the interface between two program modules, one of which is often a library and/or operating system and the other one is usually an application created by a regular programmer.
应用程序二进制接口（ABI）是两个程序模块之间的接口，其中一个模块通常是库和/或操作系统，另一个通常是由普通程序员创建的应用程序。

This NEP describes the ABI standards for NEO smart contracts.
本NEP描述了NEO智能合约的ABI标准。

==Motivation==

NEO smart contract system is designed to be mutually invocable between contracts. To achieve this, we need a mechanism for exposing the interface of smart contracts. With NeoContract ABI, developers can easily create programs to invoke smart contracts or write clients that automatically access contract functionalities.
NEO智能合约系统设计为可以在合约之间相互调用。 为了实现这个功能，我们需要提供一个机制来告诉外界合约的接口。 借助NeoContract ABI，开发人员可以轻松地在程序中调用智能合约或编写能自动调用合约的客户端。

==Rationale==

We assume the Application Binary Interface (ABI) is strongly typed, known at compilation time and static. No introspection mechanism will be provided. We assert that all contracts will have the interface definitions of any contracts they call available at compile-time.
应用程序二进制接口（ABI）是强类型的，其类型在编译时和静态时都是已知的，因此我们不会提供类型检测机制。 我们默认所有合约在编译时都已知任何被调用的合约的接口定义。

This specification does not address contracts whose interface is dynamic or otherwise known only at run-time. Should these cases become important they can be adequately handled as facilities built within the NEO ecosystem.
本规范不涉及其接口是动态的或仅在运行时才知道的合约。 哪怕这些情况变得很重要，它们可以被NEO生态系统内置的一些机制处理。

==Specification==

===Contract===

The NeoContract ABI is defined by JSON format, which has the following basic structure, where some of the top-level objects can have any number of child objects:
NeoContract ABI由JSON格式定义，具有如下基本结构，其中一些顶级对象可以有任意数量的子对象：

<pre>
{
  "hash": "0x562851057d8afbc08fabc8c438d7cc771aef2195",
  "entrypoint": "main",
  "functions": [],
  "events": []
}
</pre>

<code>hash</code> is the script hash of the contract. It is encoded as a hexadecimal string in big-endian.
<code>hash</code> 是合约的脚本哈希。 它被编码为一个十六进制的字符串，以大端编码。

<code>entrypoint</code> indicates that which is the entry point of the contract in <code>functions</code>.
<code>entrypoint</code>指明哪个方法是<code>functions</code>中合约的入口函数。

<code>functions</code> is an array of Function objects which describe the details of each function in the contract.
<code>functions</code>是一个Function对象的数组，它记录了合约中每个函数的细节。

<code>events</code> is an array of Event objects which describe the details of each event in the contract.
<code>events</code>是一个Event对象的数组，它描述了合约中每个事件的细节。

===Function===

Function object has the following structure:
Function对象有如下结构：

<pre>
{
  "name": "transfer",
  "parameters": [],
  "returntype": "Boolean"
}
</pre>

<code>name</code> is the name of the function, which can be any valid identifier.
<code>name</code>是函数的名称，可以是任何有效的标识符。

<code>parameters</code> is an array of Parameter objects which describe the details of each parameter in the function.
<code> parameters </code>是一个Parameter对象的数组，它描述了函数中每个参数的详情。

<code>returntype</code> indicates the return type of the function. It can be one of the following values: <code>Signature</code>, <code>Boolean</code>, <code>Integer</code>, <code>Hash160</code>, <code>Hash256</code>, <code>ByteArray</code>, <code>PublicKey</code>, <code>String</code>, <code>Array</code>, <code>InteropInterface</code>, <code>Void</code>.
<code> returntype </code>表示函数的返回类型。 它可以是以下值之一：<code> Signature </code>，<code> Boolean </code>，<code> Integer </code>，<code> Hash160 </code>，<code> Hash256 </code>，<code> ByteArray </code>，<code> PublicKey </code>，<code> String </code>，<code> Array </code>，<code> InteropInterface </code>,<code>void</code>。

===Event===

Event object has the following structure:
Event 对象有如下结构：
<pre>
{
  "name": "refund",
  "parameters": []
}
</pre>

<code>name</code> is the name of the event, which can be any valid identifier.
<code> name </code>是事件的名称，可以是任何有效的标识符。

<code>parameters</code> is an array of Parameter objects which describe the details of each parameter in the event.
<code> parameters </code>是一个Parameter对象的数组，它描述事件中每个参数的详细信息。

===Parameter===

Parameter object has the following structure:
Parameter 对象有如下结构：

<pre>
{
  "name": "from",
  "type": "Hash160"
}
</pre>

<code>name</code> is the name of the parameter, which can be any valid identifier.
<code> name </code>是参数的名称，可以是任何有效的标识符。

<code>type</code> indicates the type of the parameter. It can be one of the following values: <code>Signature</code>, <code>Boolean</code>, <code>Integer</code>, <code>Hash160</code>, <code>Hash256</code>, <code>ByteArray</code>, <code>PublicKey</code>, <code>String</code>, <code>Array</code>, <code>InteropInterface</code>.
<code> type </code>表示参数的类型。 它可以是以下值之一：<code>Signature</code>, <code>Boolean</code>, <code>Integer</code>, <code>Hash160</code>, <code>Hash256</code>, <code>ByteArray</code>, <code>PublicKey</code>, <code>String</code>, <code>Array</code>, <code>InteropInterface</code>。

===ParameterType===

ParameterType enum has the following values:
ParameterType枚举具有以下值：

{|
!name
!description
|-
| Signature
| A signature of a transaction or block which is generated by the user.
| 由用户生成的交易或块的签名。
|-
| Boolean
| A boolean value can be either <code>true</code> or <code>false</code>.
| 布尔值可以是<code> true </code>或<code> false </code>。
|-
| Integer
| An arbitrarily large integer whose value in theory has no upper or lower bounds.
| 一个理论值没有上限或下限的任意大的整数。
|-
| Hash160
| A 160-bits integer.
| 一个160字节整形
|-
| Hash256
| A 256-bits integer.
| 一个256字节整形
|-
| ByteArray
| A byte array.
| 一个字节数组
|-
| PublicKey
| An ECC public key which is encoded with compressed mode.
| 用压缩模式编码的ECC公钥。
|-
| String
| A string which is encoded in UTF-8.
| UTF-8编码的字符串。
|-
| Array
| An array of objects. The type of elements can be any value of ParameterType.
| 对象数组。 元素的类型可以是ParameterType的任何值。
|-
| InteropInterface
| An interface which is returned by interop services.
| 互操作服务返回的接口。
|-
| Void
| Void means that the function has no return value. This value cannot be the type of a parameter.
| Void表示该函数没有返回值。 该值不能是参数的类型。
|}

===EntryPoint===

It is strongly recommended that each contract have the following entry point function:
强烈建议每份合约都有以下入口函数：

<pre>
{
  "name": "main",
  "parameters": [
    {
      "name": "operation",
      "type": "String"
    },
    {
      "name": "args",
      "type": "Array"
    }
  ],
  "returntype": "ByteArray"
}
</pre>

In this way, the caller can easily access the functions through the entry point, specifying the name of the function to be invoked with the first parameter, and specifying the parameters of the function with the second parameter.
这样的话，合约调用者就可以通过入口函数轻松访问合约，指定要使用第一个参数调用的函数的名称，使用第二个参数传递参数。